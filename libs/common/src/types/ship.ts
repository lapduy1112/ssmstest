// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v1.181.1
//   protoc               v3.20.3
// source: proto/ship.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "ship";

export interface Ship {
  id: number;
  name: string;
  capacity: number;
  status: string;
}

export interface CreateShipRequest {
  name: string;
  capacity: number;
  status: string;
}

export interface UpdateShipRequest {
  id: number;
  name: string;
  capacity: number;
  status: string;
}

export interface DeleteShipRequest {
  id: number;
}

export interface FindShipRequest {
  id: number;
}

export interface ShipResponse {
  ship: Ship | undefined;
}

export interface DeleteShipResponse {
  message: string;
}

export interface ListShipsResponse {
  ships: Ship[];
}

export interface Empty {
}

export const SHIP_PACKAGE_NAME = "ship";

export interface ShipServiceClient {
  createShip(request: CreateShipRequest): Observable<ShipResponse>;

  updateShip(request: UpdateShipRequest): Observable<ShipResponse>;

  deleteShip(request: DeleteShipRequest): Observable<DeleteShipResponse>;

  listShips(request: Empty): Observable<ListShipsResponse>;

  findShip(request: FindShipRequest): Observable<ShipResponse>;
}

export interface ShipServiceController {
  createShip(request: CreateShipRequest): Promise<ShipResponse> | Observable<ShipResponse> | ShipResponse;

  updateShip(request: UpdateShipRequest): Promise<ShipResponse> | Observable<ShipResponse> | ShipResponse;

  deleteShip(
    request: DeleteShipRequest,
  ): Promise<DeleteShipResponse> | Observable<DeleteShipResponse> | DeleteShipResponse;

  listShips(request: Empty): Promise<ListShipsResponse> | Observable<ListShipsResponse> | ListShipsResponse;

  findShip(request: FindShipRequest): Promise<ShipResponse> | Observable<ShipResponse> | ShipResponse;
}

export function ShipServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ["createShip", "updateShip", "deleteShip", "listShips", "findShip"];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("ShipService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("ShipService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const SHIP_SERVICE_NAME = "ShipService";
